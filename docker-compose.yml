version: '3.8'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    container_name: elasticsearch
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    deploy:
      resources: 
        limits: 
          cpus: "2"
          memory: 8096M
    environment:
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - search.max_buckets=256000
    ulimits: 
      memlock: 
        hard: -1
        soft: -1
      nofile: 
        hard: 65535
        soft: 65535
      nproc: 65535
    networks:
      - monitoring

  logstash:
    image: docker.elastic.co/logstash/logstash:7.15.0
    container_name: logstash
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "7200:7200"
      - "7201:7201"
    deploy:
      resources: 
        limits: 
          cpus: "1"
          memory: 2096M
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - monitoring
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.0
    container_name: kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    deploy:
      resources: 
        limits: 
          cpus: "1"
          memory: 2096M
    networks:
      - monitoring
    depends_on:
      - elasticsearch
    healthcheck:
      interval: 10s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status

  mariadb:
    image: 'docker.io/bitnami/mariadb:latest'
    container_name: mariadb
    restart: unless-stopped
    ports:
      - '3306:3306'
    volumes:
      - 'mariadb_data:/bitnami/mariadb'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - MARIADB_DATABASE=grafana
      - MARIADB_ROOT_USER=root
      - MARIADB_ROOT_PASSWORD=5QCSguAnu2mMBZMZ
    networks:
      - monitoring
    deploy:
      resources: 
        limits: 
          cpus: "1"
          memory: 512M
    healthcheck:
      test: ['CMD', '/opt/bitnami/scripts/mariadb/healthcheck.sh']
      interval: 15s
      timeout: 5s
      retries: 6

  grafana:
    image: grafana/grafana:8.3.0 
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-Ahuzot=100$$}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DATABASE_TYPE=mysql
      - GF_DATABASE_HOST=mariadb
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=root
      - GF_DATABASE_PASSWORD=5QCSguAnu2mMBZMZ
      - GF_ALERTING_ENABLED=true
      - GF_UNIFIED_ALERTING_ENABLED=false
      - GF_INSTALL_PLUGINS=natel-discrete-panel
    ports:
      - "3000:3000"
    deploy:
      resources: 
        limits: 
          cpus: "1"
          memory: 512M
    networks:
      - monitoring
    labels:
      org.label-schema.group: "monitoring"
    depends_on:
      - mariadb

  apm-server:
    image: docker.elastic.co/apm/apm-server:7.15.0
    container_name: apm-server
    restart: unless-stopped
    depends_on:
      - elasticsearch
      - kibana
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    ports:
    - 8200:8200
    networks:
    - monitoring
    command: >
       apm-server -e
         -E apm-server.rum.enabled=true
         -E setup.kibana.host=kibana:5601
         -E setup.template.settings.index.number_of_replicas=0
         -E apm-server.kibana.enabled=true
         -E apm-server.kibana.host=kibana:5601
         -E output.elasticsearch.hosts=["elasticsearch:9200"]
    deploy:
      resources: 
        limits: 
          cpus: "1"
          memory: 512M
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

  monitoring-controller:
    image: theharpia/monitoring_controller:v1.0.6
    container_name: monitoring-controller
    volumes:
      - .:/tmp
    environment:
      - CLIENT_CONFIG_PATH=/tmp
      - GRAFANA_API=grafana:3000
      - GRAFANA_USER=admin
      - GRAFANA_PASSWORD=Ahuzot=100$$
      - KIBANA_API=kibana:5601
      - ELASTIC_API=elasticsearch:9200
      - CLIENT_NAME=$CLIENT_NAME
      - SLACK_WEBHOOK=$SLACK_WEBHOOK
      - LICENSE_KEY=$LICENSE_KEY
      # - CLIENT_NAME=Motorola-Zramim
      # - SLACK_WEBHOOK=http://slack.example.com
      # - LICENSE_KEY=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJjbGllbnRfbmFtZSI6Ik1vdG9yb2xhLVpyYW1pbSIsImV4cCI6MTYzOTQ5ODczNn0.r_UNxPWNY9kShs_YeBE8kEvnKayhP4wAVUkA-iEDaAg
    networks:
      - monitoring
    depends_on:
      - grafana
      - kibana


  influxdb:
    image: influxdb:1.8.10
    container_name: influxdb
    restart: unless-stopped
    ports:
      - "8083:8083"
      - "8086:8086"
      - "8090:8090"
    networks:
      - monitoring
    volumes:
      - influxdb_data:/var/lib/influxdb
    deploy:
      resources: 
        limits: 
          cpus: "1"
          memory: 2048M
    environment:
      - INFLUXDB_DATA_ENGINE=tsm1
      - INFLUXDB_REPORTING_DISABLED=true
      - INFLUXDB_GRAPHITE_BATCH_SIZE=1000

  telegraf:
    image: telegraf:1.18.3
    container_name: telegraf
    restart: unless-stopped
    user: root
    networks:
      - monitoring
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /:/hostfs:ro
      - /proc:/hostfs/proc:ro
      - /sys:/hostfs/sys:ro
      - /var/run:/var/run:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      resources: 
        limits: 
          cpus: "1"
          memory: 512M
    environment:
      - HOST_PROC=/hostfs/proc
      - HOST_SYS=/hostfs/sys
      - HOST_MOUNT_PREFIX=/hostfs


networks:
  monitoring:
    driver: bridge

volumes:
  elasticsearch:
  mariadb_data:
  grafana_data:
  influxdb_data:
